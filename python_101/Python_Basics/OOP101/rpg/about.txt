This game is from a tutorial on https://teamtreehouse.com/ by Kenneth Love.
It has minor changes. This is not my creation, but just me studying the tutorial!!!
Thanks to Treehouse and Kenneth Love and Treehouse for the course and notes!

Any mistakes are my own.

Below are notes from the course.

                ###########  NOTES FROM TUTORIAL  ############

You can use class.__mro__ to look at your class's method resolution order (MRO) if you're curious.
Or use the inspect.getmro() function with your class to get the same information. This can be really
handy if you're not sure what order the classes are being assembled.

When you're using multiple inheritance, super() calls become really important. They let things like __init__ travel
all the way up the chain to make sure the class has all of the bits and pieces that it needs.


isinstance(<object>, <class>) - This function will tell you whether or not <object> is an instance of <class>.
If it could be an instance of several classes, you can use a tuple of classes like so: isinstance(<object>, (<class1>, <class2>, <class3>)).

isinstance(1,(int)
isinstance(1, (int, float))

issubclass(<class>, <class>) - This function will tell you whether or not one class is a descendent of another class. Just like isinstance(),
you can use a tuple of classes to compare against.

issubclass(bool, int)

type(<instance>) will give you the class for an instance, as will instance.__class__. Neither of these is particularly useful.

type(pinecone)

pinecone.__class__
pinecone.__class__.__name__

You can read more about the magic methods(https://docs.python.org/3/reference/datamodel.html#special-method-names).  There are a lot of them,
though, so don't try and memorize them all. You'll find that, over time, you memorize the most useful ones. Here are the ones I recommend you start with:

__str__ - Control how your instances turn into strings
__int__ - Control int() conversion
__init__ - Customize the initialization of your instances


***************************************

def get_numbers():
    numbers = [4, 8, 15, 16, 23, 42]
    for number in numbers:
        yield number

If we used this function, with something like numbers = get_numbers(), we'd have a generator object. This is a special kind of object that has a value, a
pointer to the current index, and a __next__ method (ooh, special method!) that knows how to get the next item from the iterable. We can do next(numbers)
and we'd get 4, then 8, then 15, and so on.

Since we're just returning values from an iterable, we can use yield from to skip the entire for loop:

def get_numbers():
    numbers = [4, 8, 15, 16, 23, 42]
    yield from numbers

***************************************

Immutables should use:
    __new__

Mutables should use:
    __init__

***************************************

###

#Subclasses

class ReversedString(str):
    def __new__(self, *args, **kwargs):
        self = str.__new__(*args, **kwargs)
        self = self[::-1]
        return self

import copy

class FilledList(list)
    def __init__(self, count, value *args, **kwargs,):
        super().__init__()
        for _ in range(count):
            self.append(copy.copy(value))  #<---TODO:Look up copy, test without copy to see how it breaks

***************************************

#Classmethods:


class Book:
    def __init__(self, title, author):
        self.title = title
        self.author = author

    def __str__(self):
        return '{self.title} by {self.author}'

class Bookcase:
    def __init__(self, books=None):
        self.books = books
    
    @classmethod
    def create_bookcase(cls, book_list):
        books = []
        for title, author in book_list:
            books.append(Book(title, author))
        return cls(books)


Following example from:

https://stackabuse.com/pythons-classmethod-and-staticmethod-explained/

"The @classmethod Decorator
This decorator exists so you can create class methods that are passed the actual class object within the function call,
much like self is passed to any other ordinary instance method in a class.

In those instance methods, the self argument is the class instance object itself, which can then be used to act on instance
data. @classmethod methods also have a mandatory first argument, but this argument isn't a class instance, it's actually
the uninstantiated class itself."  --Scott Robinson, https://stackabuse.com/pythons-classmethod-and-staticmethod-explained/

class Student(object):

    @classmethod
    def from_string(cls, name_str):
        first_name, last_name = map(str, name_str.split(' '))
        student = cls(first_name, last_name)
        return student

    @classmethod
    def from_json(cls, json_obj):
        # parse json...
        return student

    @classmethod
    def from_pickle(cls, pickle_file):
        # load pickle file...
        return student

scott = Student.from_string('Scott Robinson')

***************************************

#Name Mangling / _Protected__foo:

class Protected:
    __name = "I will be name mangled"

    def __mangled_method(self):
        return self.name


#Calculated Property

class Circle:
    def __init__(self,diameter):
        self.diameter = diameter
    
    @property
    def radius(self):
        return self.diameter / 2

    @radius.setter
    def radius(self, radius):
        self.diameter = radius * 2


***************************************

#PEP 8
    Style guide!
    Combine pep8 and good sense for best style.
    Also, use the style your team uses!!!

#PEP 20: The Zen of Python
    import this

Docstrings:
"""
"""
Docstrings are used to create the help() info.

#######     LOGGING        ######

#LEVELS: CRITICAL, ERROR, WARNING, INFO, DEBUG, NOTSET

import logging

logging.basicConfig(filename="mylogfile.log", level=level.DEBUG)

logging.info("Some info")
logging.warn("Some sort of bad news")

***

import logging

logging.basicConfig(filename='cc.log', level=logging.DEBUG)

logging.debug("PP and CC")
logging.warn("Not again, Basil.")

#####      PDB     #####

import pdb

pdb.set_trace()



